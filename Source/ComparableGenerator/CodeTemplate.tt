<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

namespace <#= Namespace #>
{
    public partial <#= Type #> <#= Name #> : IComparable, IComparable<<#= Name #>>
    {
#nullable disable
        public int CompareTo(object other)
#nullable enable
        {
            if (other is null) return 1;

            if (other is <#= Name #> concreteObject)
            {
                return CompareTo(concreteObject);
            }

            throw new ArgumentException("Object is not a <#= Namespace #>.<#= Name #>.");
        }

<#
if(Type == "class") {
#>
#nullable disable
<#
}
#>
        public int CompareTo(<#= Name #> other)
<#
if(Type == "class") {
#>
#nullable enable
<#
}
#>
        {
<#
if(Type == "class") {
#>
            if (other is null) return 1;

<#
}
if(1 < Members.Count)
{
#>
            int compared;

<#
}
foreach(var member in Members) { 
#>
<# 
    if(member == Members.Last()) { 
#>
            return ComparableGenerator.Compare.Invoke(<#= member #>, other.<#= member #>);
<# 
    } else { 
#>
            compared = ComparableGenerator.Compare.Invoke(<#= member #>, other.<#= member #>);
            if (compared != 0) return compared;

<# 
    }
}
#>
        }
    }
}
